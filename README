NAME
    POE::Component::IRC::Plugin::WWW::GetPageTitle - web page title fetching
    IRC plugin

SYNOPSIS
        use strict;
        use warnings;

        use POE qw(Component::IRC  Component::IRC::Plugin::WWW::GetPageTitle);

        my $irc = POE::Component::IRC->spawn(
            nick        => 'TitleBot',
            server      => 'irc.freenode.net',
            port        => 6667,
            ircname     => 'TitleBot',
            plugin_debug => 1,
        );

        POE::Session->create(
            package_states => [
                main => [ qw(_start irc_001) ],
            ],
        );

        $poe_kernel->run;

        sub _start {
            $irc->yield( register => 'all' );

            $irc->plugin_add(
                'get_page_title' =>
                    POE::Component::IRC::Plugin::WWW::GetPageTitle->new(
                        max_uris  => 2,
                        find_uris => 1,
                        addressed => 0,
                        trigger   => qr/^/,
                    ),
            );

            $irc->yield( connect => {} );
        }

        sub irc_001 {
            $_[KERNEL]->post( $_[SENDER] => join => '#zofbot' );
        }

        <Zoffix> TitleBot, title google.ca
        <TitleBot> [google.ca] Google

        <Zoffix> google.ca zoffix.com
        <TitleBot> [google.ca] Google
        <TitleBot> [zoffix.com] Home - Zoffix Znet Portal

DESCRIPTION
    This module is a POE::Component::IRC plugin which uses
    POE::Component::IRC::Plugin for its base. It provides interface to to
    fetch titles of the URIs that are either given to the bot directly or
    (upon configuration) simply appear in the channel. It accepts input from
    public channel events, "/notice" messages as well as "/msg" (private
    messages); although that can be configured at will.

CONSTRUCTOR
  "new"
        # plain and simple
        $irc->plugin_add(
            'get_page_title' => POE::Component::IRC::Plugin::WWW::GetPageTitle->new
        );

        # juicy flavor
        $irc->plugin_add(
            'get_page_title' =>
                POE::Component::IRC::Plugin::WWW::GetPageTitle->new(
                    auto             => 1,
                    response_event   => 'irc_get_page_title',
                    banned           => [ qr/aol\.com$/i ],
                    addressed        => 1,
                    root             => [ qr/mah.net$/i ],
                    trigger          => qr/^title\s+(?=\S)/i,
                    triggers         => {
                        public  => qr/^title\s+(?=\S)/i,
                        notice  => qr/^title\s+(?=\S)/i,
                        privmsg => qr/^title\s+(?=\S)/i,
                    },
                    listen_for_input => [ qw(public notice privmsg) ],
                    eat              => 1,
                    debug            => 0,
                )
        );

    The "new()" method constructs and returns a new
    "POE::Component::IRC::Plugin::WWW::GetPageTitle" object suitable to be
    fed to POE::Component::IRC's "plugin_add" method. The constructor takes
    a few arguments, but *all of them are optional*. The possible
    arguments/values are as follows:

   "auto"
        ->new( auto => 0 );

    Optional. Takes either true or false values, specifies whether or not
    the plugin should auto respond to requests. When the "auto" argument is
    set to a true value plugin will respond to the requesting person with
    the results automatically. When the "auto" argument is set to a false
    value plugin will not respond and you will have to listen to the events
    emited by the plugin to retrieve the results (see EMITED EVENTS section
    and "response_event" argument for details). Note: this option does not
    make the plugin automatically fetch titles for every URI that appears in
    the channel, see "find_uris" argument below. Defaults to: 1.

   "find_uris"
        ->new( find_uris => 1 );

    Optional. When set to a true value will make the plugin automatically
    find all the URIs in the given text. By default set to a false value. If
    you wish the plugin to fetch titles for all the URIs that appear in the
    channel use the following options:

        ->new(
            find_uris => 1,
            addressed => 0,
            trigger   => qr/^/,
        );

    Note: regex "qr//" is special and won't cut it for "anything" as a
    trigger.

   "max_uris"
        ->new( max_uris => 2 );

    Optional. Generally you'll use this one along with "find_uris" argument.
    Specifies how many URIs from a single given input it should fetch. Use
    this option to avoid dumbasses abusing the bot. Setting this argument to
    zero means "no limit". By default is not specified (no limit).

   "response_event"
        ->new( response_event => 'event_name_to_recieve_results' );

    Optional. Takes a scalar string specifying the name of the event to emit
    when the results of the request are ready. See EMITED EVENTS section for
    more information. Defaults to: "irc_get_page_title"

   "banned"
        ->new( banned => [ qr/aol\.com$/i ] );

    Optional. Takes an arrayref of regexes as a value. If the usermask of
    the person (or thing) making the request matches any of the regexes
    listed in the "banned" arrayref, plugin will ignore the request.
    Defaults to: "[]" (no bans are set).

   "root"
        ->new( root => [ qr/\Qjust.me.and.my.friend.net\E$/i ] );

    Optional. As opposed to "banned" argument, the "root" argument allows
    access only to people whose usermasks match any of the regexen you
    specify in the arrayref the argument takes as a value. By default: it is
    not specified. Note: as opposed to "banned" specifying an empty arrayref
    to "root" argument will restrict access to everyone.

   "trigger"
        ->new( trigger => qr/^title\s+(?=\S)/i );

    Optional. Takes a regex as an argument. Messages matching this regex,
    irrelevant of the type of the message, will be considered as requests.
    See also addressed option below which is enabled by default as well as
    trigggers option which is more specific. Note: the trigger will be
    removed from the message, therefore make sure your trigger doesn't match
    the actual data that needs to be processed. Defaults to:
    "qr/^title\s+(?=\S)/i"

   "triggers"
        ->new( triggers => {
                public  => qr/^title\s+(?=\S)/i,
                notice  => qr/^title\s+(?=\S)/i,
                privmsg => qr/^title\s+(?=\S)/i,
            }
        );

    Optional. Takes a hashref as an argument which may contain either one or
    all of keys public, notice and privmsg which indicates the type of
    messages: channel messages, notices and private messages respectively.
    The values of those keys are regexes of the same format and meaning as
    for the "trigger" argument (see above). Messages matching this regex
    will be considered as requests. The difference is that only messages of
    type corresponding to the key of "triggers" hashref are checked for the
    trigger. Note: the "trigger" will be matched irrelevant of the setting
    in "triggers", thus you can have one global and specific "local"
    triggers. See also addressed option below which is enabled by default as
    well as trigggers option which is more specific. Note: the trigger will
    be removed from the message, therefore make sure your trigger doesn't
    match the actual data that needs to be processed. Defaults to:
    "qr/^title\s+(?=\S)/i"

   "addressed"
        ->new( addressed => 1 );

    Optional. Takes either true or false values. When set to a true value
    all the public messages must be *addressed to the bot*. In other words,
    if your bot's nickname is "Nick" and your trigger is "qr/^trig\s+/" you
    would make the request by saying "Nick, trig EXAMPLE". When addressed
    mode is turned on, the bot's nickname, including any whitespace and
    common punctuation character will be removed before matching the
    "trigger" (see above). When "addressed" argument it set to a false
    value, public messages will only have to match "trigger" regex in order
    to make a request. Note: this argument has no effect on "/notice" and
    "/msg" requests. Defaults to: 1

   "listen_for_input"
        ->new( listen_for_input => [ qw(public  notice  privmsg) ] );

    Optional. Takes an arrayref as a value which can contain any of the
    three elements, namely "public", "notice" and "privmsg" which indicate
    which kind of input plugin should respond to. When the arrayref contains
    "public" element, plugin will respond to requests sent from messages in
    public channels (see "addressed" argument above for specifics). When the
    arrayref contains "notice" element plugin will respond to requests sent
    to it via "/notice" messages. When the arrayref contains "privmsg"
    element, the plugin will respond to requests sent to it via "/msg"
    (private messages). You can specify any of these. In other words,
    setting "( listen_for_input =" [ qr(notice privmsg) ] )> will enable
    functionality only via "/notice" and "/msg" messages. Defaults to: "[
    qw(public notice privmsg) ]"

   "eat"
        ->new( eat => 0 );

    Optional. If set to a false value plugin will return a "PCI_EAT_NONE"
    after responding. If eat is set to a true value, plugin will return a
    "PCI_EAT_ALL" after responding. See POE::Component::IRC::Plugin
    documentation for more information if you are interested. Defaults to: 1

   "debug"
        ->new( debug => 1 );

    Optional. Takes either a true or false value. When "debug" argument is
    set to a true value some debugging information will be printed out. When
    "debug" argument is set to a false value no debug info will be printed.
    Defaults to: 0.

EMITED EVENTS
  "response_event"
        $VAR1 = {
            'title' => '[google.ca] Google',
            'what' => 'http://zoffix.com/css/center http://google.ca/ http://microsoft.com/',
            'who' => 'Zoffix!n=Zoffix@unaffiliated/zoffix',
            'type' => 'public',
            'channel' => '#zofbot',
            'message' => 'http://zoffix.com/css/center google.ca microsoft.com'
        };

    The event handler set up to handle the event, name of which you've
    specified in the "response_event" argument to the constructor (it
    defaults to "irc_get_page_title") will recieve input every time request
    is completed. Note that when "find_uris" option is turned on there may
    be several events generated (one for each URI found). The input will
    come in $_[ARG0] on a form of a hashref. The possible keys/values of
    that hashrefs are as follows:

   "title"
        { 'title' => '[google.ca] Google', }

    The "title" key will contain the "authority" section of the original URI
    and the title of the page, this is what the plugin reports to the
    channel/person when "auto" argument is turned on. Note: anything in the
    title of that page that matches "\s" will be replaced by a space
    character.

   "who"
        { 'who' => 'Zoffix!Zoffix@i.love.debian.org', }

    The "who" key will contain the user mask of the user who sent the
    request.

   "what"
        { 'what' => 'http://zoffix.com/css/center http://google.ca/ http://microsoft.com/', }

    The "what" key will contain user's message after stripping the "trigger"
    except when "find_uris" is turned on; in that case the URIs in original
    message will also be properly reformed. (see CONSTRUCTOR).

   "message"
        { 'message' => 'http://zoffix.com/css/center google.ca microsoft.com' }

    The "message" key will contain the actual message which the user sent;
    that is before the trigger is stripped.

   "type"
        { 'type' => 'public', }

    The "type" key will contain the "type" of the message the user have
    sent. This will be either "public", "privmsg" or "notice".

   "channel"
        { 'channel' => '#zofbot', }

    The "channel" key will contain the name of the channel where the message
    originated. This will only make sense if "type" key contains "public".

EXAMPLES
    The "examples/" directory of this distribution contains an example IRC
    bot that reports titles for all the URIs that appear in the channel.

AUTHOR
    Zoffix Znet, "<zoffix at cpan.org>" (<http://zoffix.com/>,
    <http://haslayout.net/>, <http://zofdesign.com/>)

BUGS
    Please report any bugs or feature requests to
    "bug-poe-component-irc-plugin-www-getpagetitle at rt.cpan.org", or
    through the web interface at
    <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=POE-Component-IRC-Plugin
    -WWW-GetPageTitle>. I will be notified, and then you'll automatically be
    notified of progress on your bug as I make changes.

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc POE::Component::IRC::Plugin::WWW::GetPageTitle

    You can also look for information at:

    *   RT: CPAN's request tracker

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=POE-Component-IRC-Plugin-W
        WW-GetPageTitle>

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/POE-Component-IRC-Plugin-WWW-GetPageTitle>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/POE-Component-IRC-Plugin-WWW-GetPageT
        itle>

    *   Search CPAN

        <http://search.cpan.org/dist/POE-Component-IRC-Plugin-WWW-GetPageTit
        le>

COPYRIGHT & LICENSE
    Copyright 2008 Zoffix Znet, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

